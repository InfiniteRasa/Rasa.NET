namespace Rasa.Cryptography.Auth;

public static class Blowfish
{
    private static readonly uint[] SBox0 =
    {
        0x8F9ED754, 0xDE268B45, 0x8B603DE8, 0x7E830682, 0x4D8C92C2, 0x1F1F2E2F, 0x5F1B3F35, 0xD6173E34, 0xAFE00B88, 0xA1E325E3,
        0xC356434D, 0xB61201FF, 0xE58461CD, 0x4174E9C2, 0xD2CE47DA, 0x49F022B6, 0x5ECEF55B, 0x760A2EC9, 0x10B9E948, 0xFDE74C37,
        0x19979258, 0x02F3CB2E, 0xF8980DD2, 0x2DB527FB, 0x97062F82, 0x3C32D594, 0x1B5BDDE2, 0xF82971CF, 0x1F6F0878, 0x6D78BBD5,
        0x6196F89F, 0x569FD691, 0x03488E84, 0xE046D2F3, 0x535B17F5, 0x698A768D, 0xCC799496, 0x2BAEC634, 0x35581C0F, 0x55935259,
        0x0268020D, 0x752F43A1, 0x83B394D0, 0x3574D98B, 0x7C8B0790, 0x2750E170, 0xE6895DA3, 0x0F678CEE, 0x2E8CDD42, 0x9064E0AC,
        0xD6DD3731, 0x5C6DAC20, 0xF9CBF938, 0xC1900D84, 0x25367C97, 0xB3BDCF49, 0x7412F482, 0x3CD81738, 0x54F6CA51, 0x828BC795,
        0x566DAF91, 0xEB5696DB, 0xAACC3D6E, 0xAA14D97E, 0x3C4BB972, 0x0E121D89, 0xFC5031EA, 0x1299927A, 0x035557FE, 0x9C12D8B0,
        0x47352F1E, 0x1344F64F, 0x54BB93E6, 0x4D58422F, 0xE4C8CA2C, 0x2A0CD8B0, 0x383449D7, 0x94D97D61, 0xCEC43FA8, 0x9D23BC3B,
        0x17D1FD18, 0x7A2D2C34, 0xB376D8D4, 0xBDAE6456, 0xA62E9E8D, 0x891E0E89, 0xB056F7AF, 0xCD7CB83E, 0x524531BD, 0x3B74A510,
        0x8B40002C, 0x1A31D043, 0x124877B8, 0xC2D24143, 0xD577D373, 0x223947AA, 0x5AFF02F0, 0x305BE9F7, 0x56AFC75B, 0xB8F358B3,
        0x1CF0A301, 0x472BB05A, 0xF6F6ED5F, 0x02729272, 0x90A81579, 0xF4F8F16C, 0x2A233515, 0xF073FB22, 0x828A1C5F, 0x3DC85BB6,
        0xAF006F14, 0x9F78BCB3, 0x20375A44, 0x1DA3DE5C, 0x8A47CB7A, 0x4B3AED7A, 0x1B914FE6, 0x6C0826EE, 0x453D2CFE, 0xC8147FD3,
        0xA36209C0, 0x54976ECC, 0x6F1AE267, 0xE3BAF8BE, 0x3FAD1643, 0x74F58A2B, 0xD229B027, 0x63070149, 0x53608FC5, 0xFBD9542A,
        0x03315724, 0x4F3DC56A, 0x361EEF40, 0xFD860064, 0x6A942C64, 0xF77CC94F, 0x52A3F8B2, 0xA201CC09, 0xBF0F4778, 0x51327531,
        0x4F4F79F1, 0x044E7118, 0x99F72515, 0x3418106E, 0x51C4EE43, 0x779E88CE, 0x3FAF065B, 0x457D5482, 0xAFC496AC, 0x0289AF99,
        0xC3C19353, 0x79F74242, 0xF89F5D59, 0x96321B7A, 0x1F20FAB7, 0x21B5E67E, 0x02E3338F, 0x3C09A2A9, 0x64E717B4, 0x34E90333,
        0x13018018, 0x4E763E1C, 0xC6F51A99, 0xE822E779, 0x2BDCB520, 0xEBD4FF36, 0xF7E3F09B, 0x3C2945F9, 0x3B7E6D88, 0x5C974072,
        0x13AFEF9D, 0x67B557BD, 0xB16951C7, 0x8BD2684F, 0x7EBC9A05, 0x8D21C212, 0x6DFFEECF, 0x030DA6B6, 0xF7E19A75, 0xC0057743,
        0x2D235EFE, 0xB6CA5F71, 0x7B57A431, 0x43DC86C9, 0x7FEF171D, 0x393E9378, 0xCE80C227, 0x96ED3538, 0x120D6062, 0xA9D31954,
        0x86611B3B, 0x123670AD, 0x9B2A40D7, 0x50CF4A9F, 0xB9FCEDE4, 0xAEA71031, 0x5548214C, 0x8BEE614C, 0x06310727, 0xFE1113CD,
        0x19B1F144, 0x129F322A, 0x81E12C34, 0x5AD816EC, 0x84074DF2, 0x01902E4D, 0xEA209697, 0xA7C71FF1, 0xBC625F3C, 0xB50E8BA1,
        0x05185608, 0x0145B9E9, 0xC81E7A99, 0xE3B84F67, 0xAED399D5, 0xF38C66EC, 0x75D487A1, 0xEA78BD8C, 0xBE717AEE, 0x5A899BBE,
        0xFECDE525, 0x93754F27, 0xAD2A32C4, 0x058C4311, 0xD657FE29, 0x5006225F, 0xF6B32306, 0x38F4A913, 0x7F7DC390, 0x21A32A8D,
        0x5AFD5DC2, 0x9110F958, 0x19082856, 0x9231E09F, 0xB556B86E, 0x9FA974B0, 0x1BAFF685, 0xFD7C2874, 0x9CEEC30D, 0x8CFBE836,
        0xB64BCCE1, 0x592AA53A, 0x47140600, 0x50361A84, 0x9B7957EE, 0x259A238C, 0x1D814AFC, 0x736F7C8B, 0x53F88396, 0x45214287,
        0x37108BCC, 0xFEDB2BFC, 0xF79E9031, 0xEE776BD5, 0xC2F03D79, 0xC204F563
    };

    private static readonly uint[] SBox1 =
    {
        0xD34E8403, 0xBF03483E, 0xC6C09D77, 0xFA3FDD25, 0xFB248D64, 0xF6EC5848, 0x1E00FECA, 0x5A396266, 0x8A9F02C3, 0x34C17FA9,
        0xA3CBF5F1, 0xB3277677, 0xA516DE39, 0xA2F78346, 0x75D66F07, 0x5DD4EC0B, 0x8E498C1E, 0xDDB7EFF1, 0x8A7A684C, 0x2583A8CA,
        0x96799106, 0x9AB1B5CF, 0x88182015, 0xC8495BF4, 0xDAE57B55, 0xE1524CD8, 0xC68E8256, 0x0EA3AA51, 0x82399FC9, 0x02C20F89,
        0xE78C0156, 0x2FC648C5, 0x7501EBC8, 0x9184587E, 0xAC03BDB2, 0xB0EFA2D3, 0xB570F584, 0x50555B23, 0x72CA1DC9, 0xADD887D4,
        0x5D224173, 0xD0E23804, 0x2F382317, 0x11AE5FF1, 0x6B0F87A3, 0x0BCD7EA5, 0xAB217329, 0x87CF6DD2, 0x4B240D7E, 0xA13A6E7F,
        0x73BC1FA4, 0x2DB14A55, 0x0AADB1AE, 0x3EA165F8, 0x0FD1C4C2, 0xAB5D34EE, 0x963C233D, 0x3181A4D8, 0xE1974DB9, 0x5F6E8F9B,
        0x8FACDEAE, 0xD2AF3AC4, 0x1EF2D068, 0xBE30B53F, 0x1C85EF88, 0x5827088F, 0x2C2DF598, 0xEC93BD25, 0x638E94B8, 0x4273F25D,
        0xA0BA16DC, 0x20FE1F5B, 0xD803AE9A, 0xC8E51A79, 0x16D0B547, 0x8ACEB825, 0x2E753386, 0xB5A0D165, 0x3C0A3936, 0xA5A69665,
        0x5112622E, 0xCB14F3FE, 0x5220FB31, 0xACF6571F, 0xE1C4545D, 0x4AD1F627, 0x049969BE, 0xD86CE318, 0x0BA05692, 0x67A9EF1B,
        0x460D97C8, 0x63699147, 0xCB26D353, 0x4A04FAED, 0x406B5E1E, 0x451C90AA, 0x5BF82BD2, 0x3511819A, 0xA4C22A9B, 0xB63B1F90,
        0x11EC62E6, 0x3CE3B12D, 0xBC0BB19C, 0x2E3A6771, 0x751C66FB, 0xAC1E1C07, 0x5194970F, 0x30105C7D, 0x517D73C2, 0xF3687B1A,
        0x3B378F6D, 0x974E6FCE, 0xD4C9C4D6, 0x81474A4B, 0x0EFB98D7, 0xCB6E8DE7, 0xB1BC3374, 0x8B7CC90F, 0xC889EA3D, 0x5DCA7132,
        0xC86136E1, 0xE04D3E50, 0x82507591, 0x34D151DC, 0xB15A8467, 0x58ADBB11, 0x70A53704, 0x8683D2BF, 0x58C024A6, 0xFA2820B7,
        0x93D99E4B, 0x14C55615, 0x5E476521, 0x42E4FAC6, 0x979AF6B0, 0x1D6C9A2B, 0xF855EAE7, 0x4C5C7BC2, 0x96B69C00, 0x52BC9D74,
        0x7A4CED74, 0xEC4C6055, 0x19CB8441, 0x446FE6AE, 0xD7FAD48D, 0x588FC505, 0xB0EFFB52, 0x43161311, 0xEF23CC58, 0xE5A2BC7F,
        0xF9108822, 0x7984A3AC, 0x83429D92, 0x5123C11D, 0x44E1EC67, 0xF540A00D, 0x4512E4FF, 0x7147C169, 0x81A1CA2E, 0x2D3752A1,
        0x2F52DDD8, 0x3397FAA5, 0x3EB16270, 0xDD8CB3E4, 0x3075320B, 0x05C2776A, 0xF628203C, 0x4243A45C, 0x199B3F61, 0x25EFD41F,
        0x6259C453, 0x9CAADB4A, 0x1CDD27ED, 0x2ACD03FA, 0x36F183E1, 0xFB183183, 0xD2D616DD, 0x09CC2A91, 0x0E454E25, 0x71515F2B,
        0x024049D1, 0x4ECD9BEA, 0x655F6720, 0x08EE1543, 0x5C9671BD, 0x1B580057, 0xA91CD924, 0xE934B344, 0x8A527C52, 0x7A2F1E38,
        0xE19F70BD, 0x1F9BABDC, 0xA07342B1, 0x3AEE70CF, 0x06A493E7, 0xE51ABE3C, 0x35635F68, 0x75DB3F19, 0xD49C2E0F, 0x2B0436E1,
        0xD06BD8F7, 0x282B88CE, 0x3B544D02, 0xC30D588D, 0x11D742F1, 0x19EE7C89, 0x8B2283B4, 0xF86B33F6, 0xB5BF4BE3, 0x398D21CE,
        0x12D48FAE, 0x33AE1426, 0xF14AA6D8, 0xE76F4CB6, 0x9D0F0A45, 0x61F49691, 0x7E5B88D7, 0xF66F2C93, 0xA7BD4A69, 0xE4135254,
        0x586A904E, 0xCE6FF2FF, 0xEC15B527, 0x2F054B1A, 0xFFD9FDCB, 0x3BBD3D45, 0x7803085F, 0xE300E291, 0xBCF358D8, 0x35A425C5,
        0x51C1156C, 0x220D046B, 0x236F6A03, 0x7C1E1ADE, 0x1550E891, 0xAE876E17, 0xF4E76076, 0x785033A4, 0x9068DDDA, 0xAF97FF1C,
        0xCF6456F7, 0xFA3C0759, 0x989E6E4A, 0xFF430625, 0x1ED8108F, 0xBE434C75, 0xAAE89ED8, 0x54C23D46, 0x01448BB5, 0x0D5E491B,
        0xCD14A9D9, 0x62435446, 0x22F26922, 0x26B6868A, 0xDAB278CD, 0x6D761F30
    };

    private static readonly uint[] SBox2 =
    {
        0x8827EC01, 0xCF9DA39D, 0xE440EEFE, 0x57FA1D50, 0xBE8D60C4, 0xE7CA8452, 0x8B4563B5, 0x3D0BC2DB, 0x3CF23903, 0xF56FFA15,
        0xFEA3A963, 0x3E9B4C56, 0xCB630C3F, 0x4BDBD5DE, 0xD842E38C, 0xC27B2F0B, 0x366B4F72, 0xE7CE2382, 0xC598AD11, 0xD0B3907A,
        0x7096A464, 0x30039092, 0x3D0F0EE1, 0xE3DE8054, 0x74256D6A, 0x762E23D3, 0x1F018042, 0x8BB16D2F, 0xF28DFE28, 0xAE1B6BFC,
        0x758BBA20, 0x8B556E71, 0x52EA4BD8, 0x27019580, 0x6CA36CAC, 0x34ED1819, 0x52BEEAEE, 0xA2863969, 0x742CDCFD, 0x12A8575B,
        0x74C4A6C7, 0xEC58EC6A, 0x95015F78, 0x3974D185, 0x10930D31, 0x91403623, 0xA06108B7, 0x6BC0F09D, 0x51EA0BBA, 0x26E42E0C,
        0x72C2D8C2, 0x3FFB7D9D, 0x6DA018E8, 0x911898C1, 0x3B9E5E0A, 0x6F0A6651, 0xDAC883C1, 0x5EDA7E00, 0xC9D7D94D, 0xE594A5E3,
        0x5CD2EBCD, 0x522A38A9, 0x69DE4E27, 0xFB5A3764, 0x4FC3A97D, 0x8DED76BE, 0x64AD536F, 0xEA7D4239, 0x87250D95, 0x5C4EE072,
        0xC5A01A30, 0x32180EA3, 0x2F764CF2, 0x8641BBF6, 0x4AE31434, 0x8C816457, 0xB84D03FF, 0xFE33F1BA, 0x8B03BCEB, 0x623A74DB,
        0x3AD8BF5A, 0x8508B545, 0x2FBE42E5, 0x701A0E20, 0xA16F47A6, 0x88C90CE6, 0xB7FB8324, 0x6040F262, 0x85876170, 0x745E1CAF,
        0x26678A49, 0xB33E84C4, 0xEB2F4ABE, 0xAF2AD27A, 0x6F2DAC31, 0xA288FE23, 0x84772FE8, 0x364B5891, 0x337A337F, 0xF787B5AA,
        0xD46F21C7, 0xCB822929, 0x7D2B9A14, 0x669D3751, 0x1535FB1F, 0x6D25FD16, 0x03D3B457, 0xEE6F47AB, 0x144C86E2, 0x6DFEEA1F,
        0x5BC7C620, 0x15926631, 0xDCD00099, 0x3CAE2AA8, 0xF64BA88B, 0xAA26A82E, 0xFB6589A2, 0xE8D7E24F, 0xC7887C10, 0x1E9F0148,
        0x45D0FBBD, 0x11E79F21, 0x1B9B8D6E, 0x516C6B9C, 0x22EAA069, 0xC224E0A9, 0x9D3271FF, 0x1B645D6E, 0xC2269118, 0x6FE5B05E,
        0x116B9CB5, 0xFE09039C, 0x4B2F3EF5, 0xD4E6E014, 0xC06B3926, 0xA290733D, 0x5933F450, 0x0A430CEB, 0xD6D9AE99, 0xFE0FB248,
        0x0CBDED1F, 0xA7C42B0F, 0xCBF1DD67, 0x3AABC4DD, 0x202C46B0, 0x74FA6114, 0xDDDD0B81, 0x3D73D371, 0xFE3AA063, 0x06632C0D,
        0xD3F2CEC1, 0x75633E7A, 0x03C2680F, 0x6E57E6A0, 0x08E1CC02, 0xB7A1E1E7, 0x7841C231, 0xDFC6E45F, 0x7D6C3B45, 0x0A39A10E,
        0xAA43F0C9, 0x241B4681, 0x2D49C364, 0x14121072, 0xC6491219, 0x5BAECAA6, 0x6D6454D7, 0xA0EDD37B, 0x14F7C53A, 0xA7958956,
        0x5AEA9B5A, 0xA7B729DB, 0xE5C6F870, 0xF1EC12F0, 0x3AD09442, 0x37C3436C, 0x8AC1732B, 0x947172B3, 0xE37DE70F, 0x61918A84,
        0x8450DDF9, 0x7BB003D7, 0x453FAD19, 0x75741112, 0x3EF71741, 0xA1DD8929, 0x4AB2FC3D, 0x43DCB136, 0x9A3F11CE, 0xFFE78AE8,
        0x715D7A6C, 0x874E5B2F, 0x329D635C, 0xF81E3AFB, 0xAD36B9C6, 0xCA98651D, 0x62DA42B2, 0x4244E0B4, 0x9C3F58C7, 0x7CAD2631,
        0xFC145A29, 0x3F78A2CB, 0xA34E0474, 0xF1621CE6, 0xDBF434AA, 0xDCCDDED9, 0x9DE873AB, 0xBB612049, 0xF7A893F6, 0x7F28ED42,
        0xC1E4F486, 0x8C6E6433, 0xE4A56261, 0x81A8A755, 0x6E81EFA4, 0xFC48276D, 0x05E10E00, 0xE8E32846, 0x45A21ED4, 0xB7993920,
        0xC784A677, 0x28DD2691, 0x502D9009, 0xB46D43A4, 0x4B7568F9, 0xFD18FD42, 0x706C76CF, 0x38B971F5, 0xD67CD5EA, 0xBB67318C,
        0x6AC2CE3A, 0xCA6BD108, 0x40687C40, 0x4E6A0D94, 0x95F611BE, 0x44C69FC4, 0x20084E67, 0x7F035D80, 0x12FB31E5, 0x743109A8,
        0x423D111C, 0x3F2C68A2, 0xF899CCA4, 0xCCFD0B82, 0x4C102D3A, 0x7DBFAB46, 0xE43697CA, 0x8E9CF7C0, 0xC1E614E7, 0x88D6B104,
        0x7B9A9DC3, 0xB99DA600, 0x5D3F1D52, 0x8FADF78D, 0xFEDE4FEE, 0x5025AC81
    };

    private static readonly uint[] SBox3 =
    {
        0xAAE6F852, 0x753D5BA2, 0x34495010, 0xD0E618CF, 0xC9E43DCA, 0xBB63E9C0, 0x52CF10C8, 0xA410D859, 0xEF12A444, 0x737D3E2B,
        0x2C3C27C5, 0x234BC11C, 0x4AC9DEFD, 0x465B6E59, 0xF1B5156B, 0x14FEAE51, 0xD76B93AB, 0x57CAEB33, 0x2F44A9FF, 0x3F45F135,
        0xBCB372CA, 0x83E084E4, 0x7BFF6B7A, 0x39432B26, 0x40F65BFB, 0x24042E97, 0x1151BC51, 0xF0C12A3D, 0xF2335B74, 0x74EA34A4,
        0x49DCCE86, 0x9963260E, 0xE1667004, 0x0103BDFE, 0xFA597032, 0xFD4DE20E, 0x00485105, 0xA5D23BAE, 0xC37CFCA0, 0x440081E4,
        0xAB264B22, 0x0E6459A8, 0x4190A3C1, 0x442C8B86, 0x8902B297, 0x9BE6C831, 0x28F908D9, 0x4B346736, 0xC82D95CD, 0x0D87059B,
        0x29226AB3, 0x86D876B4, 0xE86A1280, 0x19CF1382, 0x6504C32F, 0xDDA19AAF, 0x2417F345, 0xF0EFED61, 0x4129EDD1, 0xEE154CD7,
        0xCE8C6231, 0x44E69BB8, 0x2B4189D4, 0x5156E779, 0x4FC32785, 0x4334E1C4, 0xD66BB347, 0x7104463E, 0x90FB6A38, 0x884977D8,
        0x620B647A, 0x1B83D9E1, 0x48F4B7AB, 0x134B9CC7, 0xDF67C5CE, 0x155FC624, 0xF674983D, 0x6F542DC8, 0x3A80CC22, 0xF8B53B0C,
        0x35883F85, 0xA9A4F8C3, 0x47BF7BDD, 0x726F7E95, 0x0A6F0147, 0xADFA327C, 0xAA42D26A, 0x5C24C2F8, 0xDF22EF5E, 0x2F245CAC,
        0x6F3AC577, 0x3C995DD0, 0x08931D80, 0x3179A274, 0x182641BE, 0x4B410C02, 0x2C7E6849, 0x05C8A035, 0x931C9CFB, 0xB93DF6C1,
        0xF61DF996, 0xE41D2366, 0x87B7906E, 0xBB0BEDB5, 0xA5D7F85C, 0xCF4EA254, 0x2F6245F4, 0x41EAB256, 0x20451B82, 0x8CB97B29,
        0xBA51158D, 0xE8E35361, 0xEAF22516, 0x327D9523, 0x1017F8BA, 0xF930F281, 0x8C44C91F, 0x3B738D2F, 0xA64AF845, 0x197EA779,
        0x511D5001, 0x9EA29B9F, 0x41862F0F, 0x1B3FA8C0, 0x433AE22F, 0xA0B55038, 0x7E6FE78F, 0xD6E55D13, 0x214207CE, 0x45744A04,
        0xB39EADEA, 0x7CE97F1F, 0x0989A02A, 0xD644F365, 0x6EFDB995, 0xB205CDD9, 0xB21B44A9, 0x57C5BB1F, 0x2C80920D, 0xB680273E,
        0x460B81CC, 0x012CA81A, 0x08BDF12A, 0x05433744, 0x2FC0DDE9, 0x09F72E23, 0xBEA49FC7, 0x5421A114, 0xC44DDA7B, 0xE49DBAB6,
        0x487B7377, 0xD282E10F, 0x6D0C3196, 0x61AE90BB, 0xBF348266, 0x30C75585, 0x2EAD11A5, 0xA53422FD, 0x989717D2, 0x2032CBD1,
        0x0C491518, 0xB02F4E56, 0x4DF3A162, 0xD40DA7E8, 0x8519BD5C, 0xEBC1FC82, 0x2FCAD29E, 0x4456139F, 0x186269F3, 0x4DCB58A5,
        0x6C8503F7, 0x8A04C438, 0x6A6B0044, 0xE05AA61A, 0xA29334C4, 0x8987A82E, 0xF0BA7EB7, 0xBD18C285, 0x06B0B028, 0xA0A66690,
        0x0F4BCA36, 0xD570CDCE, 0x1ECFFC31, 0xD601B847, 0x880F1BD8, 0x22D41437, 0x029BBDA9, 0xF2EDD463, 0x5A916D8A, 0xD704954F,
        0x30570329, 0x0BC2564E, 0xB44D946E, 0x26F727AC, 0x45657F92, 0x1AD11FB7, 0xB14F2F06, 0x891AF3ED, 0x994418B5, 0x9DC6E341,
        0x62BB4700, 0xDAE2A3E4, 0x07D27364, 0x2FD1F62F, 0x8957EA89, 0x2F6980C9, 0xB8BBF8F9, 0x5D02788A, 0xE5954184, 0x4308FE8D,
        0xD777F756, 0xE8D1FB93, 0x5504EF0A, 0x474B51C4, 0x5DA6017C, 0x5B156C13, 0xDE760633, 0xC17D04FE, 0xF25BEF47, 0x5F63CD38,
        0x4D43CCEB, 0xFE65C9C7, 0xF38F5ED6, 0x7F2E55D9, 0x75D19CC6, 0x03B6CE3F, 0x829A7880, 0xF8F658B5, 0x86C2468A, 0xD5C52A72,
        0xA73025EA, 0x091DDE9E, 0xA2C09F5D, 0xEBEBDBF0, 0xD60C9AEA, 0xEDB1C3D3, 0x202D9E65, 0x9DEF99BF, 0x306CFC61, 0x325BCAE1,
        0x570ABC2B, 0x9976F185, 0x4518E177, 0xAF5D0B2A, 0x17F9FDA0, 0x264AD959, 0x5A81DD68, 0xC921D161, 0xE1CE2049, 0xA3685311,
        0xFBFBBA97, 0x1A21E8AC, 0x5BCE2943, 0x7D758A7D, 0x5D598AA2, 0x8971150B
    };

    private static readonly uint[] PBox =
    {
        0xAE915BC6, 0x15426B3F, 0x79ED8A9A, 0x0E1C4091, 0xFBB7286A, 0x1854506C, 0xF620245D, 0x9733B6DE, 0x6FB18C28,
        0x4C8B7C70, 0x85E2D4F6, 0xE4936A12, 0xAE6CDF53, 0x95CB3D66, 0xB43A52D3, 0xE9BDD2DE, 0xD138BDA0, 0x7B584F44
    };

    /// <summary>
    /// Encrypts the specified byte array with no offset and full length.
    /// </summary>
    /// <param name="data">The byte array to encrypt.</param>
    public static void Encrypt(byte[] data)
    {
        Encrypt(data, 0, data.Length);
    }

    /// <summary>
    /// Encrypts the specified byte array at a given offset for a given length.
    /// </summary>
    /// <param name="data">The byte array to encrypt.</param>
    /// <param name="offset">The offset at which to begin.</param>
    /// <param name="length">The length for which to encrypt.</param>
    public static void Encrypt(byte[] data, int offset, int length)
    {
        var blocks = length >> 3;

        for (var k = 0; k < blocks; k++)
        {
            var p = offset + (k << 3);

            var xl = (uint) (data[p    ] | (data[p + 1] << 8) | (data[p + 2] << 16) | (data[p + 3] << 24));
            var xr = (uint) (data[p + 4] | (data[p + 5] << 8) | (data[p + 6] << 16) | (data[p + 7] << 24));

            uint tmp;

            for (var i = 0; i < 16; i++)
            {
                tmp = xl ^ PBox[i];
                xl = F(tmp) ^ xr;
                xr = tmp;
            }

            tmp = xl;
            xl = xr;
            xr = tmp;
            xr ^= PBox[16];
            xl ^= PBox[17];

            data[p    ] = (byte)( xl        & 0xFF);
            data[p + 1] = (byte)((xl >>  8) & 0xFF);
            data[p + 2] = (byte)((xl >> 16) & 0xFF);
            data[p + 3] = (byte)((xl >> 24) & 0xFF);
            data[p + 4] = (byte)( xr        & 0xFF);
            data[p + 5] = (byte)((xr >>  8) & 0xFF);
            data[p + 6] = (byte)((xr >> 16) & 0xFF);
            data[p + 7] = (byte)((xr >> 24) & 0xFF);
        }
    }

    /// <summary>
    /// Decrypts the specified byte array with no offset and full length.
    /// </summary>
    /// <param name="data">The byte array to encrypt.</param>
    public static void Decrypt(byte[] data)
    {
        Decrypt(data, 0, data.Length);
    }

    /// <summary>
    /// Decrypts the specified byte array at a given offset for a given length.
    /// </summary>
    /// <param name="data">The byte array to decrypt.</param>
    /// <param name="offset">The offset at which to begin.</param>
    /// <param name="length">The length for which to decrypt.</param>
    public static void Decrypt(byte[] data, int offset, int length)
    {
        var blocks = length >> 3;

        for (var k = 0; k < blocks; k++)
        {
            var p = offset + (k << 3);

            var lb = (uint) (data[p    ] | (data[p + 1] << 8) | (data[p + 2] << 16) | (data[p + 3] << 24));
            var rb = (uint) (data[p + 4] | (data[p + 5] << 8) | (data[p + 6] << 16) | (data[p + 7] << 24));
            uint tmp;

            for (var i = 17; i > 1; i--)
            {
                tmp = lb ^ PBox[i];
                lb = F(tmp) ^ rb;
                rb = tmp;
            }

            tmp = lb;
            lb = rb;
            rb = tmp;
            rb ^= PBox[1];
            lb ^= PBox[0];

            data[p    ] = (byte) ( lb        & 0xFF);
            data[p + 1] = (byte) ((lb >>  8) & 0xFF);
            data[p + 2] = (byte) ((lb >> 16) & 0xFF);
            data[p + 3] = (byte) ((lb >> 24) & 0xFF);
            data[p + 4] = (byte) ( rb        & 0xFF);
            data[p + 5] = (byte) ((rb >>  8) & 0xFF);
            data[p + 6] = (byte) ((rb >> 16) & 0xFF);
            data[p + 7] = (byte) ((rb >> 24) & 0xFF);
        }
    }

    /// <summary>
    /// The round (Feistel) function of the Cipher.
    /// </summary>
    /// <param name="x"></param>
    /// <returns></returns>
    private static uint F(uint x)
    {
        var y = SBox0[(x >> 24) & 0xff];
        y += SBox1[(x >> 16) & 0xff];
        y ^= SBox2[(x >> 8) & 0xff];
        y += SBox3[x & 0xff];

        return y;
    }
}
