// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Rasa.Database;

namespace Rasa.Database.Migrations.Char
{
    [DbContext(typeof(CharacterContext))]
    partial class CharacterContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("Rasa.Structures.CharacterAbilitydrawerEntry", b =>
                {
                    b.Property<uint>("AccountId")
                        .HasColumnName("accountId")
                        .HasColumnType("int(11) unsigned");

                    b.Property<uint>("CharacterSlot")
                        .HasColumnName("characterSlot")
                        .HasColumnType("int(11) unsigned");

                    b.Property<int>("AbilitySlotId")
                        .HasColumnName("abilitySlotId")
                        .HasColumnType("int(11)");

                    b.Property<int>("AbilityId")
                        .HasColumnName("abilityId")
                        .HasColumnType("int(10)");

                    b.Property<int>("AbilityLevel")
                        .HasColumnName("abilityLevel")
                        .HasColumnType("int(11)");

                    b.HasKey("AccountId", "CharacterSlot", "AbilitySlotId");

                    b.ToTable("character_abilitydrawer");
                });

            modelBuilder.Entity("Rasa.Structures.CharacterAppearanceEntry", b =>
                {
                    b.Property<uint>("CharacterId")
                        .HasColumnName("character_id")
                        .HasColumnType("int(11) unsigned");

                    b.Property<uint>("Slot")
                        .HasColumnName("slot")
                        .HasColumnType("int(11) unsigned");

                    b.Property<uint>("Class")
                        .HasColumnName("class")
                        .HasColumnType("int(11) unsigned");

                    b.Property<uint>("Color")
                        .HasColumnName("color")
                        .HasColumnType("int(11) unsigned");

                    b.HasKey("CharacterId", "Slot")
                        .HasName("PRIMARY");

                    b.ToTable("character_appearance");
                });

            modelBuilder.Entity("Rasa.Structures.CharacterEntry", b =>
                {
                    b.Property<uint>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("int(11) unsigned");

                    b.Property<uint>("AccountId")
                        .HasColumnName("account_id")
                        .HasColumnType("int(11) unsigned");

                    b.Property<sbyte>("ActiveWeapon")
                        .HasColumnName("active_weapon")
                        .HasColumnType("tinyint(3)");

                    b.Property<uint>("Body")
                        .HasColumnName("body")
                        .HasColumnType("int(11) unsigned");

                    b.Property<uint>("Class")
                        .HasColumnName("class")
                        .HasColumnType("int(11) unsigned");

                    b.Property<uint>("CloneCredits")
                        .HasColumnName("clone_credits")
                        .HasColumnType("int(11) unsigned");

                    b.Property<float>("CoordX")
                        .HasColumnName("coord_x")
                        .HasColumnType("float");

                    b.Property<float>("CoordY")
                        .HasColumnName("coord_y")
                        .HasColumnType("float");

                    b.Property<float>("CoordZ")
                        .HasColumnName("coord_z")
                        .HasColumnType("float");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("created_at")
                        .HasColumnType("timestamp")
                        .HasDefaultValueSql("'current_timestamp()'");

                    b.Property<int>("Credits")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("credits")
                        .HasColumnType("int(11)")
                        .HasDefaultValueSql("'0'");

                    b.Property<uint>("Experience")
                        .HasColumnName("experience")
                        .HasColumnType("int(11) unsigned");

                    b.Property<ulong>("Gender")
                        .HasColumnName("gender")
                        .HasColumnType("bit(1)");

                    b.Property<DateTime?>("LastLogin")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("last_login")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("'NULL'");

                    b.Property<byte>("Level")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("level")
                        .HasColumnType("tinyint(3) unsigned")
                        .HasDefaultValueSql("'1'");

                    b.Property<uint>("MapContextId")
                        .HasColumnName("map_context_id")
                        .HasColumnType("int(11) unsigned");

                    b.Property<uint>("Mind")
                        .HasColumnName("mind")
                        .HasColumnType("int(11) unsigned");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasColumnType("varchar(64)")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.Property<uint>("NumLogins")
                        .HasColumnName("num_logins")
                        .HasColumnType("int(11) unsigned");

                    b.Property<float>("Orientation")
                        .HasColumnName("orientation")
                        .HasColumnType("float");

                    b.Property<int>("Prestige")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("prestige")
                        .HasColumnType("int(11)")
                        .HasDefaultValueSql("'0'");

                    b.Property<byte>("Race")
                        .HasColumnName("race")
                        .HasColumnType("tinyint(3) unsigned");

                    b.Property<double>("Scale")
                        .HasColumnName("scale")
                        .HasColumnType("double unsigned");

                    b.Property<byte>("Slot")
                        .HasColumnName("slot")
                        .HasColumnType("tinyint(3) unsigned");

                    b.Property<uint>("Spirit")
                        .HasColumnName("spirit")
                        .HasColumnType("int(11) unsigned");

                    b.Property<uint>("TotalTimePlayed")
                        .HasColumnName("total_time_played")
                        .HasColumnType("int(11) unsigned");

                    b.HasKey("Id");

                    b.HasIndex("AccountId")
                        .HasName("character_index_account");

                    b.ToTable("character");
                });

            modelBuilder.Entity("Rasa.Structures.CharacterInventoryEntry", b =>
                {
                    b.Property<uint>("AccountId")
                        .HasColumnName("accountId")
                        .HasColumnType("int(10) unsigned");

                    b.Property<uint>("CharacterSlot")
                        .HasColumnName("characterSlot")
                        .HasColumnType("int(10) unsigned");

                    b.Property<uint>("ItemId")
                        .HasColumnName("itemId")
                        .HasColumnType("int(10) unsigned");

                    b.Property<int>("InventoryType")
                        .HasColumnName("inventoryType")
                        .HasColumnType("int(11)");

                    b.Property<int>("SlotId")
                        .HasColumnName("slotId")
                        .HasColumnType("int(11)");

                    b.HasKey("AccountId", "CharacterSlot", "ItemId");

                    b.HasIndex("ItemId")
                        .IsUnique()
                        .HasName("itemId");

                    b.ToTable("character_inventory");
                });

            modelBuilder.Entity("Rasa.Structures.CharacterLockboxEntry", b =>
                {
                    b.Property<uint>("AccountId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("accountId")
                        .HasColumnType("int(10) unsigned");

                    b.Property<int>("Credits")
                        .HasColumnName("credits")
                        .HasColumnType("int(10)");

                    b.Property<int>("PurashedTabs")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("purashedTabs")
                        .HasColumnType("int(10)")
                        .HasDefaultValueSql("'1'");

                    b.HasKey("AccountId")
                        .HasName("PRIMARY");

                    b.ToTable("character_lockbox");
                });

            modelBuilder.Entity("Rasa.Structures.CharacterLogosEntry", b =>
                {
                    b.Property<uint>("AccountId")
                        .HasColumnName("accountId")
                        .HasColumnType("int(10) unsigned");

                    b.Property<uint>("CharacterSlot")
                        .HasColumnName("characterSlot")
                        .HasColumnType("int(10) unsigned");

                    b.Property<int>("LogosId")
                        .HasColumnName("logosId")
                        .HasColumnType("int(11)");

                    b.HasKey("AccountId", "CharacterSlot");

                    b.ToTable("character_logos");
                });

            modelBuilder.Entity("Rasa.Structures.CharacterMissionsEntry", b =>
                {
                    b.Property<uint>("AccountId")
                        .HasColumnName("accountId")
                        .HasColumnType("int(11) unsigned");

                    b.Property<uint>("CharacterSlot")
                        .HasColumnName("characterSlot")
                        .HasColumnType("int(11) unsigned");

                    b.Property<int>("MissionId")
                        .HasColumnName("missionId")
                        .HasColumnType("int(11)");

                    b.Property<sbyte>("MissionState")
                        .HasColumnName("missionState")
                        .HasColumnType("tinyint(4)");

                    b.HasKey("AccountId", "CharacterSlot", "MissionId");

                    b.ToTable("character_missions");
                });

            modelBuilder.Entity("Rasa.Structures.CharacterOptionsEntry", b =>
                {
                    b.Property<int?>("CharacterId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("character_id")
                        .HasColumnType("int(11)")
                        .HasDefaultValueSql("'NULL'");

                    b.Property<int?>("OptionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("option_id")
                        .HasColumnType("int(11)")
                        .HasDefaultValueSql("'NULL'");

                    b.Property<string>("Value")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("value")
                        .HasColumnType("varchar(50)")
                        .HasDefaultValueSql("'NULL'")
                        .HasAnnotation("MySql:CharSet", "latin1")
                        .HasAnnotation("MySql:Collation", "latin1_swedish_ci");

                    b.HasKey("CharacterId", "OptionId");

                    b.ToTable("character_options");
                });

            modelBuilder.Entity("Rasa.Structures.CharacterSkillsEntry", b =>
                {
                    b.Property<uint>("AccountId")
                        .HasColumnName("accountId")
                        .HasColumnType("int(11) unsigned");

                    b.Property<uint>("CharacterSlot")
                        .HasColumnName("characterSlot")
                        .HasColumnType("int(11) unsigned");

                    b.Property<int>("SkillId")
                        .HasColumnName("skillId")
                        .HasColumnType("int(11)");

                    b.Property<int>("AbilityId")
                        .HasColumnName("abilityId")
                        .HasColumnType("int(11)");

                    b.Property<int>("SkillLevel")
                        .HasColumnName("skillLevel")
                        .HasColumnType("int(11)");

                    b.HasKey("AccountId", "CharacterSlot", "SkillId", "AbilityId");

                    b.ToTable("character_skills");
                });

            modelBuilder.Entity("Rasa.Structures.CharacterTeleportersEntry", b =>
                {
                    b.Property<uint?>("CharacterId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("character_id")
                        .HasColumnType("int(10) unsigned")
                        .HasDefaultValueSql("'NULL'");

                    b.Property<uint?>("WaypointId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("waypoint_id")
                        .HasColumnType("int(10) unsigned")
                        .HasDefaultValueSql("'NULL'");

                    b.HasKey("CharacterId", "WaypointId");

                    b.ToTable("character_teleporters");

                    b.HasComment("holds data about all waypoints and wormholes that character gained");
                });

            modelBuilder.Entity("Rasa.Structures.CharacterTitlesEntry", b =>
                {
                    b.Property<uint>("AccountId")
                        .HasColumnName("accountId")
                        .HasColumnType("int(11) unsigned");

                    b.Property<uint>("CharacterSlot")
                        .HasColumnName("characterSlot")
                        .HasColumnType("int(11) unsigned");

                    b.Property<int>("TitleId")
                        .HasColumnName("titleId")
                        .HasColumnType("int(11)");

                    b.HasKey("AccountId", "CharacterSlot", "TitleId");

                    b.ToTable("character_titles");
                });

            modelBuilder.Entity("Rasa.Structures.ClanEntry", b =>
                {
                    b.Property<uint>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("int(11) unsigned");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("created_at")
                        .HasColumnType("timestamp")
                        .HasDefaultValueSql("'current_timestamp()'");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasColumnType("varchar(100)")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.HasKey("Id");

                    b.ToTable("clan");
                });

            modelBuilder.Entity("Rasa.Structures.ClanMemberEntry", b =>
                {
                    b.Property<uint>("ClanId")
                        .HasColumnName("clan_id")
                        .HasColumnType("int(11) unsigned");

                    b.Property<uint>("CharacterId")
                        .HasColumnName("character_id")
                        .HasColumnType("int(11) unsigned");

                    b.Property<byte>("Rank")
                        .HasColumnName("rank")
                        .HasColumnType("tinyint(3) unsigned");

                    b.HasKey("ClanId", "CharacterId")
                        .HasName("PRIMARY");

                    b.HasIndex("CharacterId")
                        .IsUnique()
                        .HasName("clan_member_index_character");

                    b.ToTable("clan_member");
                });

            modelBuilder.Entity("Rasa.Structures.GameAccountEntry", b =>
                {
                    b.Property<uint>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("int(11) unsigned");

                    b.Property<ulong>("CanSkipBootcamp")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("can_skip_bootcamp")
                        .HasColumnType("bit(1)")
                        .HasDefaultValueSql("b'0'");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("created_at")
                        .HasColumnType("timestamp")
                        .HasDefaultValueSql("current_timestamp()");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnName("email")
                        .HasColumnType("varchar(255)")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.Property<string>("FamilyName")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("family_name")
                        .HasColumnType("varchar(64)")
                        .HasDefaultValueSql("''")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.Property<string>("LastIP")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("last_ip")
                        .HasColumnType("varchar(15)")
                        .HasDefaultValueSql("'0.0.0.0'")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.Property<DateTime>("LastLogin")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("last_login")
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("current_timestamp()");

                    b.Property<byte>("Level")
                        .HasColumnName("level")
                        .HasColumnType("tinyint(3) unsigned");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasColumnType("varchar(64)")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.Property<byte>("SelectedSlot")
                        .HasColumnName("selected_slot")
                        .HasColumnType("tinyint(3) unsigned");

                    b.HasKey("Id");

                    b.ToTable("account");
                });

            modelBuilder.Entity("Rasa.Structures.ItemsEntry", b =>
                {
                    b.Property<uint>("ItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("itemId")
                        .HasColumnType("int(11) unsigned");

                    b.Property<int>("AmmoCount")
                        .HasColumnName("ammoCount")
                        .HasColumnType("int(11)");

                    b.Property<int>("Color")
                        .HasColumnName("color")
                        .HasColumnType("int(11)");

                    b.Property<string>("CrafterName")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("crafterName")
                        .HasColumnType("varchar(64)")
                        .HasDefaultValueSql("''''''")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("createdAt")
                        .HasColumnType("timestamp")
                        .HasDefaultValueSql("'current_timestamp()'");

                    b.Property<int>("CurrentHitPoints")
                        .HasColumnName("currentHitPoints")
                        .HasColumnType("int(11)");

                    b.Property<int>("ItemTemplateId")
                        .HasColumnName("itemTemplateId")
                        .HasColumnType("int(11)");

                    b.Property<int>("StackSize")
                        .HasColumnName("stackSize")
                        .HasColumnType("int(11)");

                    b.HasKey("ItemId")
                        .HasName("PRIMARY");

                    b.HasIndex("ItemId")
                        .IsUnique()
                        .HasName("id");

                    b.ToTable("items");
                });

            modelBuilder.Entity("Rasa.Structures.UserOptionsEntry", b =>
                {
                    b.Property<int?>("AccountId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("account_id")
                        .HasColumnType("int(11)")
                        .HasDefaultValueSql("'NULL'");

                    b.Property<int>("OptionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("option_id")
                        .HasColumnType("int(11)")
                        .HasDefaultValueSql("'NULL'");

                    b.Property<string>("Value")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("value")
                        .HasColumnType("varchar(50)")
                        .HasDefaultValueSql("'NULL'")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.HasKey("AccountId", "OptionId");

                    b.ToTable("user_options");
                });

            modelBuilder.Entity("Rasa.Structures.CharacterAppearanceEntry", b =>
                {
                    b.HasOne("Rasa.Structures.CharacterEntry", "Character")
                        .WithMany("CharacterAppearance")
                        .HasForeignKey("CharacterId")
                        .HasConstraintName("character_appearance_FK_character")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Rasa.Structures.CharacterEntry", b =>
                {
                    b.HasOne("Rasa.Structures.GameAccountEntry", "Account")
                        .WithMany("Character")
                        .HasForeignKey("AccountId")
                        .HasConstraintName("character_FK_account")
                        .IsRequired();
                });

            modelBuilder.Entity("Rasa.Structures.ClanMemberEntry", b =>
                {
                    b.HasOne("Rasa.Structures.CharacterEntry", "Character")
                        .WithOne("ClanMember")
                        .HasForeignKey("Rasa.Structures.ClanMemberEntry", "CharacterId")
                        .HasConstraintName("clan_member_FK_character")
                        .IsRequired();

                    b.HasOne("Rasa.Structures.ClanEntry", "Clan")
                        .WithMany("ClanMember")
                        .HasForeignKey("ClanId")
                        .HasConstraintName("clan_member_FK_clan")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
