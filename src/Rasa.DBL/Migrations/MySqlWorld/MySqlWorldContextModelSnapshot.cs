// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Rasa.Context.World;

namespace Rasa.Migrations.MySqlWorld
{
    [DbContext(typeof(MySqlWorldContext))]
    partial class MySqlWorldContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 64)
                .HasAnnotation("ProductVersion", "5.0.1");

            modelBuilder.Entity("Rasa.Structures.World.ExperienceForLevelEntry", b =>
                {
                    b.Property<uint>("Level")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11) unsigned")
                        .HasColumnName("level")
                        .HasAnnotation("MySql:ValueGenerationStrategy", MySqlValueGenerationStrategy.None);

                    b.Property<ulong>("Experience")
                        .HasColumnType("bigint(20) unsigned")
                        .HasColumnName("experience");

                    b.HasKey("Level");

                    b.ToTable("player_exp_for_level");
                });

            modelBuilder.Entity("Rasa.Structures.World.ItemTemplateItemClassEntry", b =>
                {
                    b.Property<uint>("ItemTemplateId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11) unsigned")
                        .HasColumnName("itemTemplateId")
                        .HasAnnotation("MySql:ValueGenerationStrategy", MySqlValueGenerationStrategy.None);

                    b.Property<uint>("ItemClass")
                        .HasColumnType("int(11) unsigned")
                        .HasColumnName("itemClassId");

                    b.HasKey("ItemTemplateId");

                    b.ToTable("itemtemplate_itemclass");
                });

            modelBuilder.Entity("Rasa.Structures.World.RandomNameEntry", b =>
                {
                    b.Property<string>("Name")
                        .HasColumnType("varchar(64)")
                        .HasColumnName("name");

                    b.Property<byte>("Type")
                        .HasColumnType("tinyint(3) unsigned")
                        .HasColumnName("type");

                    b.Property<byte>("Gender")
                        .HasColumnType("tinyint(3) unsigned")
                        .HasColumnName("gender");

                    b.HasKey("Name", "Type", "Gender");

                    b.ToTable("player_random_name");
                });
#pragma warning restore 612, 618
        }
    }
}
                    b.Property<double>("RangeMax")
                        .HasColumnType("double")
                        .HasColumnName("range_max");

                    b.Property<double>("RangeMin")
                        .HasColumnType("double")
                        .HasColumnName("range_min");

                    b.Property<uint>("Windup")
                        .HasColumnType("int unsigned")
                        .HasColumnName("windup");

                    b.HasKey("Id");

                    b.ToTable("creature_action");
                });

            modelBuilder.Entity("Rasa.Structures.World.CreatureAppearanceEntry", b =>
                {
                    b.Property<uint>("ClassId")
                        .HasColumnType("int unsigned")
                        .HasColumnName("Class_id");

                    b.Property<uint>("Color")
                        .HasColumnType("int unsigned")
                        .HasColumnName("color");

                    b.Property<uint>("Id")
                        .HasColumnType("int unsigned")
                        .HasColumnName("id");

                    b.Property<uint>("SlotId")
                        .HasColumnType("int unsigned")
                        .HasColumnName("slot_id");

                    b.ToTable("creature_appearance");
                });

            modelBuilder.Entity("Rasa.Structures.World.CreatureEntry", b =>
                {
                    b.Property<uint>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int unsigned")
                        .HasColumnName("id");

                    b.Property<uint>("Action1")
                        .HasColumnType("int unsigned")
                        .HasColumnName("action1");

                    b.Property<uint>("Action2")
                        .HasColumnType("int unsigned")
                        .HasColumnName("action2");

                    b.Property<uint>("Action3")
                        .HasColumnType("int unsigned")
                        .HasColumnName("action3");

                    b.Property<uint>("Action4")
                        .HasColumnType("int unsigned")
                        .HasColumnName("action4");

                    b.Property<uint>("Action5")
                        .HasColumnType("int unsigned")
                        .HasColumnName("action5");

                    b.Property<uint>("Action6")
                        .HasColumnType("int unsigned")
                        .HasColumnName("action6");

                    b.Property<uint>("Action7")
                        .HasColumnType("int unsigned")
                        .HasColumnName("action7");

                    b.Property<uint>("Action8")
                        .HasColumnType("int unsigned")
                        .HasColumnName("action8");

                    b.Property<uint>("ClassId")
                        .HasColumnType("int unsigned")
                        .HasColumnName("class_id");

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .HasColumnName("comment");

                    b.Property<uint>("Faction")
                        .HasColumnType("int unsigned")
                        .HasColumnName("faction");

                    b.Property<uint>("Level")
                        .HasColumnType("int unsigned")
                        .HasColumnName("level");

                    b.Property<uint>("MaxHitPoints")
                        .HasColumnType("int unsigned")
                        .HasColumnName("max_hp");

                    b.Property<uint>("NameId")
                        .HasColumnType("int unsigned")
                        .HasColumnName("name_id");

                    b.Property<uint>("RunSpeed")
                        .HasColumnType("int unsigned")
                        .HasColumnName("run_speed");

                    b.Property<uint>("WalkSpeed")
                        .HasColumnType("int unsigned")
                        .HasColumnName("walk_speed");

                    b.HasKey("Id");

                    b.ToTable("creature");
                });

            modelBuilder.Entity("Rasa.Structures.World.CreatureStatEntry", b =>
                {
                    b.Property<uint>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int unsigned")
                        .HasColumnName("id");

                    b.Property<int>("Armor")
                        .HasColumnType("int")
                        .HasColumnName("armor");

                    b.Property<int>("Body")
                        .HasColumnType("int")
                        .HasColumnName("body");

                    b.Property<int>("Health")
                        .HasColumnType("int")
                        .HasColumnName("health");

                    b.Property<int>("Mind")
                        .HasColumnType("int")
                        .HasColumnName("mind");

                    b.Property<int>("Spirit")
                        .HasColumnType("int")
                        .HasColumnName("spirit");

                    b.HasKey("Id");

                    b.ToTable("creature_stat");
                });

            modelBuilder.Entity("Rasa.Structures.World.EntityClassEntry", b =>
                {
                    b.Property<uint>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int unsigned")
                        .HasColumnName("id");

                    b.Property<string>("AugList")
                        .IsRequired()
                        .HasColumnType("varchar(60)")
                        .HasColumnName("aug_list");

                    b.Property<byte>("ClassCollisionRole")
                        .HasColumnType("tinyint unsigned")
                        .HasColumnName("class_collision_role");

                    b.Property<string>("ClassName")
                        .IsRequired()
                        .HasColumnType("varchar(60)")
                        .HasColumnName("class_name");

                    b.Property<uint>("MeshId")
                        .HasColumnType("int unsigned")
                        .HasColumnName("mesh_id");

                    b.Property<byte>("TargetFlag")
                        .HasColumnType("tinyint unsigned")
                        .HasColumnName("target_flag");

                    b.HasKey("Id");

                    b.ToTable("entityclass");
                });

            modelBuilder.Entity("Rasa.Structures.World.EquipableClassEntry", b =>
                {
                    b.Property<uint>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int unsigned")
                        .HasColumnName("id");

                    b.Property<uint>("SlotId")
                        .HasColumnType("int unsigned")
                        .HasColumnName("slot_id");

                    b.HasKey("Id");

                    b.ToTable("equipableclass");
                });

            modelBuilder.Entity("Rasa.Structures.World.ExperienceForLevelEntry", b =>
                {
                    b.Property<uint>("Level")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11) unsigned")
                        .HasColumnName("level")
                        .HasAnnotation("MySql:ValueGenerationStrategy", MySqlValueGenerationStrategy.None);

                    b.Property<ulong>("Experience")
                        .HasColumnType("bigint(20) unsigned")
                        .HasColumnName("experience");

                    b.HasKey("Level");

                    b.ToTable("player_exp_for_level");
                });

            modelBuilder.Entity("Rasa.Structures.World.FootlockerEntry", b =>
                {
                    b.Property<uint>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int unsigned")
                        .HasColumnName("id");

                    b.Property<uint>("ClassId")
                        .HasColumnType("int unsigned")
                        .HasColumnName("class_id");

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasColumnType("varchar(64)")
                        .HasColumnName("comment");

                    b.Property<uint>("MapContextId")
                        .HasColumnType("int unsigned")
                        .HasColumnName("map_context_id");

                    b.Property<double>("PosX")
                        .HasColumnType("double")
                        .HasColumnName("pos_x");

                    b.Property<double>("PosY")
                        .HasColumnType("double")
                        .HasColumnName("pos_y");

                    b.Property<double>("PosZ")
                        .HasColumnType("double")
                        .HasColumnName("pos_z");

                    b.Property<double>("Rotation")
                        .HasColumnType("double")
                        .HasColumnName("rotation");

                    b.HasKey("Id");

                    b.ToTable("footlocker");
                });

            modelBuilder.Entity("Rasa.Structures.World.ItemClassEntry", b =>
                {
                    b.Property<uint>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int unsigned")
                        .HasColumnName("id");

                    b.Property<uint>("DragAudioSetId")
                        .HasColumnType("int unsigned")
                        .HasColumnName("drag_audio_set_id");

                    b.Property<uint>("DropAudioSetId")
                        .HasColumnType("int unsigned")
                        .HasColumnName("drop_audio_set_id");

                    b.Property<ulong>("HidenInventoryFlag")
                        .HasColumnType("bit")
                        .HasColumnName("hidden_invenotry_flag");

                    b.Property<uint>("InventoryIconStringId")
                        .HasColumnType("int unsigned")
                        .HasColumnName("inventory_icon_string_id");

                    b.Property<ulong>("IsConsumableFlag")
                        .HasColumnType("bit")
                        .HasColumnName("is_consumable_flag");

                    b.Property<uint>("LootValue")
                        .HasColumnType("int unsigned")
                        .HasColumnName("loot_value");

                    b.Property<int>("MaxHitPoints")
                        .HasColumnType("int")
                        .HasColumnName("max_hp");

                    b.Property<uint>("StackSize")
                        .HasColumnType("int unsigned")
                        .HasColumnName("stack_size");

                    b.HasKey("Id");

                    b.ToTable("itemclass");
                });

            modelBuilder.Entity("Rasa.Structures.World.ItemTemplateArmorEntry", b =>
                {
                    b.Property<uint>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int unsigned")
                        .HasColumnName("id");

                    b.Property<int>("ArmorValue")
                        .HasColumnType("int")
                        .HasColumnName("armor_value");

                    b.HasKey("Id");

                    b.ToTable("itemtemplate_armor");
                });

            modelBuilder.Entity("Rasa.Structures.World.ItemTemplateEntry", b =>
                {
                    b.Property<uint>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int unsigned")
                        .HasColumnName("id");

                    b.Property<byte>("BoundToCharacterFlag")
                        .HasColumnType("tinyint unsigned")
                        .HasColumnName("bound_to_character_flag");

                    b.Property<int>("BuyPrice")
                        .HasColumnType("int")
                        .HasColumnName("buy_price");

                    b.Property<byte>("HasAccountUniqueFlag")
                        .HasColumnType("tinyint unsigned")
                        .HasColumnName("has_account_unique_flag");

                    b.Property<byte>("HasBoEFlag")
                        .HasColumnType("tinyint unsigned")
                        .HasColumnName("has_boe_flag");

                    b.Property<byte>("HasCharacterUniqueFlag")
                        .HasColumnType("tinyint unsigned")
                        .HasColumnName("has_character_unique_flag");

                    b.Property<byte>("HasSellableFlag")
                        .HasColumnType("tinyint unsigned")
                        .HasColumnName("has_sellable_flag");

                    b.Property<byte>("InventoryCategory")
                        .HasColumnType("tinyint unsigned")
                        .HasColumnName("inventory_category");

                    b.Property<byte>("NotPlacableInLockboxFlag")
                        .HasColumnType("tinyint unsigned")
                        .HasColumnName("not_placable_in_lockbox_flag");

                    b.Property<byte>("NotTradableFlag")
                        .HasColumnType("tinyint unsigned")
                        .HasColumnName("not_tradable_flag");

                    b.Property<byte>("QualityId")
                        .HasColumnType("tinyint unsigned")
                        .HasColumnName("quality_id");

                    b.Property<int>("SellPrice")
                        .HasColumnType("int")
                        .HasColumnName("sell_price");

                    b.HasKey("Id");

                    b.ToTable("itemtemplate");
                });

            modelBuilder.Entity("Rasa.Structures.World.ItemTemplateItemClassEntry", b =>
                {
                    b.Property<uint>("ItemTemplateId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11) unsigned")
                        .HasColumnName("itemTemplateId")
                        .HasAnnotation("MySql:ValueGenerationStrategy", MySqlValueGenerationStrategy.None);

                    b.Property<uint>("ItemClass")
                        .HasColumnType("int(11) unsigned")
                        .HasColumnName("itemClassId");

                    b.HasKey("ItemTemplateId");

                    b.ToTable("itemtemplate_itemclass");
                });

            modelBuilder.Entity("Rasa.Structures.World.ItemTemplateRequirementEntry", b =>
                {
                    b.Property<uint>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int unsigned")
                        .HasColumnName("id");

                    b.Property<byte>("RequirementType")
                        .HasColumnType("tinyint unsigned")
                        .HasColumnName("req_type");

                    b.Property<byte>("RequirementValue")
                        .HasColumnType("tinyint unsigned")
                        .HasColumnName("req_value");

                    b.HasKey("Id");

                    b.ToTable("itemtemplate_requirement");
                });

            modelBuilder.Entity("Rasa.Structures.World.ItemTemplateRequirementRaceEntry", b =>
                {
                    b.Property<uint>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int unsigned")
                        .HasColumnName("id");

                    b.Property<byte>("RaceId")
                        .HasColumnType("tinyint unsigned")
                        .HasColumnName("race_id");

                    b.HasKey("Id");

                    b.ToTable("itemtemplate_requirement_race");
                });

            modelBuilder.Entity("Rasa.Structures.World.ItemTemplateRequirementSkillEntry", b =>
                {
                    b.Property<uint>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int unsigned")
                        .HasColumnName("id");

                    b.Property<int>("SkillId")
                        .HasColumnType("int")
                        .HasColumnName("skill_id");

                    b.Property<byte>("SkillLevel")
                        .HasColumnType("tinyint unsigned")
                        .HasColumnName("skill_level");

                    b.HasKey("Id");

                    b.ToTable("itemtemplate_requirement_skill");
                });

            modelBuilder.Entity("Rasa.Structures.World.ItemTemplateResistanceEntry", b =>
                {
                    b.Property<uint>("Id")
                        .HasColumnType("int unsigned")
                        .HasColumnName("id");

                    b.Property<byte>("ResistanceType")
                        .HasColumnType("tinyint unsigned")
                        .HasColumnName("resistance_type");

                    b.Property<int>("ResistanceValue")
                        .HasColumnType("int")
                        .HasColumnName("resistance_value");

                    b.ToTable("itemtemplate_resistance");
                });

            modelBuilder.Entity("Rasa.Structures.World.ItemTemplateWeaponEntry", b =>
                {
                    b.Property<uint>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int unsigned")
                        .HasColumnName("id");

                    b.Property<uint>("AeRadius")
                        .HasColumnType("int unsigned")
                        .HasColumnName("ae_radius");

                    b.Property<uint>("AeType")
                        .HasColumnType("int unsigned")
                        .HasColumnName("ae_type");

                    b.Property<double>("AimRate")
                        .HasColumnType("double")
                        .HasColumnName("aim_rate");

                    b.Property<uint>("AltActionArgId")
                        .HasColumnType("int unsigned")
                        .HasColumnName("alt_action_arg_id");

                    b.Property<uint>("AltActionId")
                        .HasColumnType("int unsigned")
                        .HasColumnName("alt_action_id");

                    b.Property<uint>("AltAeRadius")
                        .HasColumnType("int unsigned")
                        .HasColumnName("alt_ae_radius");

                    b.Property<uint>("AltAeType")
                        .HasColumnType("int unsigned")
                        .HasColumnName("alt_ae_type");

                    b.Property<uint>("AltDamageType")
                        .HasColumnType("int unsigned")
                        .HasColumnName("alt_damage_type");

                    b.Property<uint>("AltMaxDamage")
                        .HasColumnType("int unsigned")
                        .HasColumnName("alt_max_damage");

                    b.Property<uint>("AltRange")
                        .HasColumnType("int unsigned")
                        .HasColumnName("alt_range");

                    b.Property<uint>("AmmoPerShot")
                        .HasColumnType("int unsigned")
                        .HasColumnName("ammo_per_shot");

                    b.Property<uint>("AttackType")
                        .HasColumnType("int unsigned")
                        .HasColumnName("attack_type");

                    b.Property<uint>("CoolRate")
                        .HasColumnType("int unsigned")
                        .HasColumnName("cool_rate");

                    b.Property<double>("HeatPerShot")
                        .HasColumnType("double")
                        .HasColumnName("heat_per_shot");

                    b.Property<uint>("Range")
                        .HasColumnType("int unsigned")
                        .HasColumnName("range");

                    b.Property<uint>("RecoilAmount")
                        .HasColumnType("int unsigned")
                        .HasColumnName("recoil_amount");

                    b.Property<uint>("Recovery")
                        .HasColumnType("int unsigned")
                        .HasColumnName("recovery");

                    b.Property<uint>("Refire")
                        .HasColumnType("int unsigned")
                        .HasColumnName("refire");

                    b.Property<uint>("ReloadTime")
                        .HasColumnType("int unsigned")
                        .HasColumnName("reload_time");

                    b.Property<uint>("ReuseOverride")
                        .HasColumnType("int unsigned")
                        .HasColumnName("reuse_override");

                    b.Property<uint>("ToolType")
                        .HasColumnType("int unsigned")
                        .HasColumnName("tool_type");

                    b.Property<uint>("Windup")
                        .HasColumnType("int unsigned")
                        .HasColumnName("windup");

                    b.HasKey("Id");

                    b.ToTable("itemtemplate_weapon");
                });

            modelBuilder.Entity("Rasa.Structures.World.LogosEntry", b =>
                {
                    b.Property<uint>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int unsigned")
                        .HasColumnName("id");

                    b.Property<uint>("ClassId")
                        .HasColumnType("int unsigned")
                        .HasColumnName("class_id");

                    b.Property<uint>("MapContextId")
                        .HasColumnType("int unsigned")
                        .HasColumnName("map_context_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(64)")
                        .HasColumnName("name");

                    b.Property<double>("PosX")
                        .HasColumnType("double")
                        .HasColumnName("pos_x");

                    b.Property<double>("PosY")
                        .HasColumnType("double")
                        .HasColumnName("pos_y");

                    b.Property<double>("PosZ")
                        .HasColumnType("double")
                        .HasColumnName("pos_z");

                    b.HasKey("Id");

                    b.ToTable("logos");
                });

            modelBuilder.Entity("Rasa.Structures.World.MapInfoEntry", b =>
                {
                    b.Property<uint>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int unsigned")
                        .HasColumnName("map_context_id");

                    b.Property<uint>("BaseRegion")
                        .HasColumnType("int unsigned")
                        .HasColumnName("base_region");

                    b.Property<string>("MapName")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .HasColumnName("map_name");

                    b.Property<uint>("MapVersion")
                        .HasColumnType("int unsigned")
                        .HasColumnName("map_version");

                    b.HasKey("Id");

                    b.ToTable("map_info");
                });

            modelBuilder.Entity("Rasa.Structures.World.NpcMissionEntry", b =>
                {
                    b.Property<byte>("Command")
                        .HasColumnType("tinyint unsigned")
                        .HasColumnName("command");

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .HasColumnName("comment");

                    b.Property<uint>("Id")
                        .HasColumnType("int unsigned")
                        .HasColumnName("id");

                    b.Property<uint>("Var1")
                        .HasColumnType("int unsigned")
                        .HasColumnName("var1");

                    b.Property<uint>("Var2")
                        .HasColumnType("int unsigned")
                        .HasColumnName("var2");

                    b.Property<uint>("Var3")
                        .HasColumnType("int unsigned")
                        .HasColumnName("var3");

                    b.ToTable("npc_mission");
                });

            modelBuilder.Entity("Rasa.Structures.World.NpcPackageEntry", b =>
                {
                    b.Property<uint>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int unsigned")
                        .HasColumnName("id");

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .HasColumnName("comment");

                    b.Property<uint>("PackageId")
                        .HasColumnType("int unsigned")
                        .HasColumnName("package_id");

                    b.HasKey("Id");

                    b.ToTable("npc_package");
                });

            modelBuilder.Entity("Rasa.Structures.World.RandomNameEntry", b =>
                {
                    b.Property<string>("Name")
                        .HasColumnType("varchar(64)")
                        .HasColumnName("name");

                    b.Property<byte>("Type")
                        .HasColumnType("tinyint(3) unsigned")
                        .HasColumnName("type");

                    b.Property<byte>("Gender")
                        .HasColumnType("tinyint(3) unsigned")
                        .HasColumnName("gender");

                    b.HasKey("Name", "Type", "Gender");

                    b.ToTable("player_random_name");
                });

            modelBuilder.Entity("Rasa.Structures.World.SpawnPoolEntry", b =>
                {
                    b.Property<uint>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int unsigned")
                        .HasColumnName("id");

                    b.Property<byte>("AnimType")
                        .HasColumnType("tinyint unsigned")
                        .HasColumnName("anim_type");

                    b.Property<uint>("Creature1Id")
                        .HasColumnType("int unsigned")
                        .HasColumnName("creature_1_Id");

                    b.Property<byte>("Creature1MaxCount")
                        .HasColumnType("tinyint unsigned")
                        .HasColumnName("creature_1_max_count");

                    b.Property<byte>("Creature1MinCount")
                        .HasColumnType("tinyint unsigned")
                        .HasColumnName("creature_1_min_count");

                    b.Property<uint>("Creature2Id")
                        .HasColumnType("int unsigned")
                        .HasColumnName("creature_2_Id");

                    b.Property<byte>("Creature2MaxCount")
                        .HasColumnType("tinyint unsigned")
                        .HasColumnName("creature_2_max_count");

                    b.Property<byte>("Creature2MinCount")
                        .HasColumnType("tinyint unsigned")
                        .HasColumnName("creature_2_min_count");

                    b.Property<uint>("Creature3Id")
                        .HasColumnType("int unsigned")
                        .HasColumnName("creature_3_Id");

                    b.Property<byte>("Creature3MaxCount")
                        .HasColumnType("tinyint unsigned")
                        .HasColumnName("creature_3_max_count");

                    b.Property<byte>("Creature3MinCount")
                        .HasColumnType("tinyint unsigned")
                        .HasColumnName("creature_3_min_count");

                    b.Property<uint>("Creature4Id")
                        .HasColumnType("int unsigned")
                        .HasColumnName("creature_4_Id");

                    b.Property<byte>("Creature4MaxCount")
                        .HasColumnType("tinyint unsigned")
                        .HasColumnName("creature_4_max_count");

                    b.Property<byte>("Creature4MinCount")
                        .HasColumnType("tinyint unsigned")
                        .HasColumnName("creature_4_min_count");

                    b.Property<uint>("Creature5Id")
                        .HasColumnType("int unsigned")
                        .HasColumnName("creature_5_Id");

                    b.Property<byte>("Creature5MaxCount")
                        .HasColumnType("tinyint unsigned")
                        .HasColumnName("creature_5_max_count");

                    b.Property<byte>("Creature5MinCount")
                        .HasColumnType("tinyint unsigned")
                        .HasColumnName("creature_5_min_count");

                    b.Property<uint>("Creature6Id")
                        .HasColumnType("int unsigned")
                        .HasColumnName("creature_6_Id");

                    b.Property<byte>("Creature6MaxCount")
                        .HasColumnType("tinyint unsigned")
                        .HasColumnName("creature_6_max_count");

                    b.Property<byte>("Creature6MinCount")
                        .HasColumnType("tinyint unsigned")
                        .HasColumnName("creature_6_min_count");

                    b.Property<uint>("MapContextId")
                        .HasColumnType("int unsigned")
                        .HasColumnName("map_context_id");

                    b.Property<byte>("Mode")
                        .HasColumnType("tinyint unsigned")
                        .HasColumnName("mode");

                    b.Property<double>("PosX")
                        .HasColumnType("double")
                        .HasColumnName("pos_x");

                    b.Property<double>("PosY")
                        .HasColumnType("double")
                        .HasColumnName("pos_y");

                    b.Property<double>("PosZ")
                        .HasColumnType("double")
                        .HasColumnName("pos_z");

                    b.Property<uint>("RespawnTime")
                        .HasColumnType("int unsigned")
                        .HasColumnName("respown_time");

                    b.Property<double>("Rotation")
                        .HasColumnType("double")
                        .HasColumnName("rotation");

                    b.HasKey("Id");

                    b.ToTable("spawnpool");
                });

            modelBuilder.Entity("Rasa.Structures.World.TeleporterEntry", b =>
                {
                    b.Property<uint>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int unsigned")
                        .HasColumnName("id");

                    b.Property<uint>("ClassId")
                        .HasColumnType("int unsigned")
                        .HasColumnName("class_id");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("varchar(64)")
                        .HasColumnName("description");

                    b.Property<uint>("MapContextId")
                        .HasColumnType("int unsigned")
                        .HasColumnName("map_context_id");

                    b.Property<double>("PosX")
                        .HasColumnType("double")
                        .HasColumnName("pos_x");

                    b.Property<double>("PosY")
                        .HasColumnType("double")
                        .HasColumnName("pos_y");

                    b.Property<double>("PosZ")
                        .HasColumnType("double")
                        .HasColumnName("pos_z");

                    b.Property<double>("Rotation")
                        .HasColumnType("double")
                        .HasColumnName("rotation");

                    b.Property<byte>("Type")
                        .HasColumnType("tinyint unsigned")
                        .HasColumnName("type");

                    b.HasKey("Id");

                    b.ToTable("teleporter");
                });

            modelBuilder.Entity("Rasa.Structures.World.VendorEntry", b =>
                {
                    b.Property<uint>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int unsigned")
                        .HasColumnName("id");

                    b.Property<uint>("PackageId")
                        .HasColumnType("int unsigned")
                        .HasColumnName("package_id");

                    b.HasKey("Id");

                    b.ToTable("vendor");
                });

            modelBuilder.Entity("Rasa.Structures.World.VendorItemEntry", b =>
                {
                    b.Property<uint>("Id")
                        .HasColumnType("int unsigned")
                        .HasColumnName("id");

                    b.Property<uint>("ItemTemplateId")
                        .HasColumnType("int unsigned")
                        .HasColumnName("item_template_id");

                    b.ToTable("vendor_item");
                });

            modelBuilder.Entity("Rasa.Structures.World.WeaponClassEntry", b =>
                {
                    b.Property<uint>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int unsigned")
                        .HasColumnName("id");

                    b.Property<uint>("AmmoClassId")
                        .HasColumnType("int unsigned")
                        .HasColumnName("ammo_class_id");

                    b.Property<uint>("AttackActionArgId")
                        .HasColumnType("int unsigned")
                        .HasColumnName("attack_action_arg_id");

                    b.Property<uint>("AttackActionId")
                        .HasColumnType("int unsigned")
                        .HasColumnName("attack_action_id");

                    b.Property<uint>("ClipSize")
                        .HasColumnType("int unsigned")
                        .HasColumnName("clip_size");

                    b.Property<byte>("DamageType")
                        .HasColumnType("tinyint unsigned")
                        .HasColumnName("damage_type");

                    b.Property<byte>("DrawActionId")
                        .HasColumnType("tinyint unsigned")
                        .HasColumnName("draw_action_id");

                    b.Property<int>("MaxDamage")
                        .HasColumnType("int")
                        .HasColumnName("max_damage");

                    b.Property<int>("MinDamage")
                        .HasColumnType("int")
                        .HasColumnName("min_damage");

                    b.Property<ulong>("RangeType")
                        .HasColumnType("bit")
                        .HasColumnName("range_type");

                    b.Property<ulong>("RecoveryOverride")
                        .HasColumnType("bit")
                        .HasColumnName("recovery_override");

                    b.Property<byte>("ReloadActionId")
                        .HasColumnType("tinyint unsigned")
                        .HasColumnName("reload_action_id");

                    b.Property<ulong>("ReloadOverride")
                        .HasColumnType("bit")
                        .HasColumnName("reload_override");

                    b.Property<ulong>("ReuseOverride")
                        .HasColumnType("bit")
                        .HasColumnName("reuse_override");

                    b.Property<byte>("StowActionId")
                        .HasColumnType("tinyint unsigned")
                        .HasColumnName("stow_action_id");

                    b.Property<ulong>("UnknownArg1")
                        .HasColumnType("bit")
                        .HasColumnName("unk_arg1");

                    b.Property<ulong>("UnknownArg2")
                        .HasColumnType("bit")
                        .HasColumnName("unk_arg2");

                    b.Property<ulong>("UnknownArg3")
                        .HasColumnType("bit")
                        .HasColumnName("unk_arg3");

                    b.Property<ulong>("UnknownArg4")
                        .HasColumnType("bit")
                        .HasColumnName("unk_arg4");

                    b.Property<ulong>("UnknownArg5")
                        .HasColumnType("bit")
                        .HasColumnName("unk_arg5");

                    b.Property<uint>("UnknownArg6")
                        .HasColumnType("int unsigned")
                        .HasColumnName("unk_arg6");

                    b.Property<ulong>("UnknownArg7")
                        .HasColumnType("bit")
                        .HasColumnName("unk_arg7");

                    b.Property<uint>("UnknownArg8")
                        .HasColumnType("int unsigned")
                        .HasColumnName("unk_arg8");

                    b.Property<int>("Velocity")
                        .HasColumnType("int")
                        .HasColumnName("velocity");

                    b.Property<uint>("WeaponAnimConditionCode")
                        .HasColumnType("int unsigned")
                        .HasColumnName("weapon_anim_condition_code");

                    b.Property<uint>("WeaponTemplatId")
                        .HasColumnType("int unsigned")
                        .HasColumnName("weapon_template_id");

                    b.Property<ulong>("WindupOverride")
                        .HasColumnType("bit")
                        .HasColumnName("windup_override");

                    b.HasKey("Id");

                    b.ToTable("weaponclass");
                });
#pragma warning restore 612, 618
        }
    }
}
